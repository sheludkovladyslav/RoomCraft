import * as basicLightbox from 'basiclightbox';
import { roomInstance } from './Room';
import { success, error  } from '@pnotify/core';
import '@pnotify/core/dist/PNotify.css';
import '@pnotify/core/dist/BrightTheme.css';

import 'basiclightbox/dist/basicLightbox.min.css';

const settings = document.querySelector('.settings');



function saveRoom() {
  success({
    text: 'üè† –ö—ñ–º–Ω–∞—Ç—É —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!',
    delay: 2500,
    addClass: 'custom-alert',
    closerHover: true,
    sticker: false,
    width: '350px',
  });
}

function roomLoaded() {
  success({
    text: '‚úÖ –ö—ñ–º–Ω–∞—Ç—É —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!',
    delay: 2500,
    addClass: 'load-alert',
    closerHover: true,
    sticker: false,
    width: '350px',
  });
}

function deleteRoom() {
  error({
    text: '‚ùå –ö—ñ–º–Ω–∞—Ç—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!',
    delay: 2500,
    addClass: 'deleted-alert',
    closerHover: true,
    sticker: false,
    width: '350px',
  });
}


const settingsHandler = event => {
  const instance = basicLightbox.create(`
    <div class="modal">
      <div class="grid">
        <div class="grid__toggler toggler active">
          <div class="toggler__circle"></div>
        </div>
        <p class="grid__label">–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—ñ—Ç–∫—É</p>
      </div>

      
      <div class="select-wrapper">
        <select name="skins-selector" id="skins" class="modal__selector skins">
          <option value="" disabled selected hidden>
            –í–∏–±—Ä–∞—Ç–∏ –≤–∏–≥–ª—è–¥ –∫—ñ–º–Ω–∞—Ç–∏
          </option>
          <option value="style1">–°—Ç–∏–ª—å #1</option>
          <option value="style2">–°—Ç–∏–ª—å #2</option>
          <option value="style3">–°—Ç–∏–ª—å #3</option>
        </select>
      </div>

      <div class="modal__buttons buttons">
        <div class="buttons__wrapper">
          <button class="button__save">–ó–±–µ—Ä–µ–≥—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É</button>
          <button class="button__load">–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É</button>
        </div>
        <button class="button__delete">–í–∏–¥–∞–ª–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—É –∫—ñ–º–Ω–∞—Ç—É</button>
      </div>


      <button class="modal__close close">
    X
      </button>
    </div>
  `);

  instance.show();

  const modalElement = instance.element();
  const saveBtn = modalElement.querySelector('.button__save');
  const loadBtn = modalElement.querySelector('.button__load');
  const deleteBtn = modalElement.querySelector('.button__delete');

  const hideGrid = btn => {
    if (btn.classList.contains('active')) {
      localStorage.setItem('grid', 'gridOn');
    } else {
      localStorage.setItem('grid', 'gridOff');
    }
  };
  const toggleButton = modalElement.querySelector('.toggler');

  if (localStorage && localStorage.getItem('grid') === 'gridOn') {
    toggleButton.classList.add('active');
  }

  if (localStorage && localStorage.getItem('grid') === 'gridOff') {
    toggleButton.classList.remove('active');
  }

  saveBtn.addEventListener('click', () => {
    roomInstance.saveRoomState();
    saveRoom()
  });

  loadBtn.addEventListener('click', () => {
    roomInstance.loadRoomState();
    roomLoaded()
  });

  deleteBtn.addEventListener('click', () => {
    roomInstance.deleteRoomState();
    deleteRoom()
  });

  toggleButton.addEventListener('click', () => {
    toggleButton.classList.toggle('active');
    hideGrid(toggleButton);
    roomInstance.gridCheck();
  });

  const closeButton = modalElement.querySelector('.modal__close');
  closeButton.addEventListener('click', () => {
    instance.close();
  });
};

settings.addEventListener('click', settingsHandler);
